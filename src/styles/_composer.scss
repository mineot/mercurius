@use "@/styles/colors" as colors;
@use "@/styles/variables" as vars;
@use "sass:color";
@use "sass:map";

@mixin hover-action-mixin($color, $inverse: null) {
  &:hover {
    @if $inverse {
      background-color: color.adjust($color, $lightness: colors.$hover);
      color: color.adjust($inverse, $lightness: colors.$hover);
    } @else {
      color: color.adjust($color, $lightness: colors.$hover);
    }
  }

  &:active {
    @if $inverse {
      background-color: color.adjust($color, $lightness: colors.$active);
      color: color.adjust($inverse, $lightness: colors.$active);
    } @else {
      color: color.adjust($color, $lightness: colors.$active);
    }
  }
}

@each $key, $value in colors.$colors {
  $color: map.get($value, "color");
  $inverse: map.get($value, "inverse");

  .bg-#{$key} {
    background-color: $color;
  }

  .text-#{$key} {
    color: $color;
  }

  .text-#{$key}-inverse {
    color: $inverse;
  }

  .border-#{$key} {
    border-color: $color;
    border-style: vars.$border-style;
    border-width: vars.$border-width;
  }

  @each $position in vars.$border-positions {
    .border-#{$key}-#{$position} {
      border-#{$position}-color: $color;
      border-#{$position}-style: vars.$border-style;
      border-#{$position}-width: vars.$border-width;
    }
  }

  .btn-#{$key} {
    background-color: $color;
    border-radius: vars.$btn-radius;
    border: none;
    color: $inverse;
    cursor: pointer;
    font-size: vars.$font-size-medium;
    outline: none;
    padding: vars.$btn-padding;
    text-decoration: none;

    display: inline-flex;
    flex-direction: row;
    gap: vars.$btn-gap;

    @include hover-action-mixin($color, $inverse);

    &.link {
      color: $color;
      text-decoration: underline;
      background-color: transparent;
      padding: 0;

      @include hover-action-mixin($color);
    }
  }
}

// .text-small {
//   font-size: vars.$font-size-small;
// }

// .text-large {
//   font-size: vars.$font-size-large;
// }
